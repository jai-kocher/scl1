def augmentedMatrix(seq):
    seq = [i.replace(' ', '').replace('-', ' -') for i in seq]
    neq = len(seq)
    nvar = max([len(re.findall('[a-zA-z]', i)) for i in seq])
    res = [int(re.sub('[A-Za-z]', '', j)) for k in [re.split(' |\+|\=', i) for i in seq] for j in k if j]
    augMat = np.reshape(res, (neq, nvar + 1))
    return(augMat)

def isNonZero(row):
    return True if set(row) != {0} else False 

def isAboveZeroRow(k, mat):
    return all(i > mat.index(mat[k]) for i in [j for j in range(len(mat)) if set(mat[j]) == {0}])

def firstNonZero(row):
    for i in row:
        if i != 0:
            return(i)

def checkREF(mat):
    l = len(mat[0])
    nz = len(mat) - mat.count([0] * l)
    c = 0
    for i in range(len(mat)):
        if isNonZero(mat[i]) and firstNonZero(mat[i]) == 1 and isAboveZeroRow(i, mat):
            if i > 0 and mat[i].index(1) > mat[i - 1].index(1):
                c += 1
            elif i == 0:
                c += 1
 
    return True if c == nz else False

def checkRREF(mat):
    l = len(mat[0])
    nz = len(mat) - mat.count([0] * l)
    c = 0
    for i in range(len(mat)):
        if isNonZero(mat[i]) and isAboveZeroRow(i, mat):
            pivInd = mat[i].index(1)
            if mat[i][:pivInd] == [0] * pivInd:
                col = [mat[j][pivInd] for j in range(len(mat))]
                if set(col) == {1, 0} and col.count(1) == 1:
                    c += 1
    
    return True if c == nz else False




-------GAUSS SEIDEL-------
augMat = augmentedMatrix([c1, c2, c3])
neq = len(augMat)
vars = dict()
rows = dict()
for i in range(neq):
    vars[i] = 0
    rows[i + 1] = augMat[i]

for i in range(20):
    for j in range(neq):
        vars[j] = (rows[j + 1][-1] - sum([rows[j + 1][k] * vars[k] for k in range(neq) if k != j])) / rows[j + 1][j]

for i in range(neq):
    print(f'{chr(i + 120)} = {round(vars[i], 2)}')



-------GAUSS JACOBI--------
a1 = '4x + 1y + 1z = 2'
a2 = '1x + 5y + 2z = -6'
a3 = '1x + 2y + 3z = -4'

b1 = '2x + 5y = 21'
b2 = '1x + 2y = 8'

c1 = '2x + 3y - 1z = 5'
c2 = '3x + 2y + 1z = 10'
c3 = '1x - 5y + 3z = 0'

augMat = augmentedMatrix([a1, a2, a3])
neq = len(augMat)
prevset = [0] * neq
vars = dict()
rows = dict()
for i in range(neq):
    vars[i] = 0
    rows[i + 1] = augMat[i]

for i in range(20):
    for j in range(neq):
        vars[j] = (rows[j + 1][-1] - sum([rows[j + 1][k] * prevset[k] for k in range(neq) if k != j])) / rows[j + 1][j]
    prevset = list(vars.values())

for i in range(neq):
    print(f'{chr(i + 120)} = {round(vars[i])}')

-------EIGENVALUES-------
a, x, y, z = sp.symbols('a, x, y, z')

def eigenValues(matrix):
  a = sp.Symbol('a')
  mat = sp.Matrix(matrix - a * np.identity(len(matrix), dtype = 'float'))
  eigen = sp.solve(sp.det(mat), a)
  return(eigen)

def eigenVectors(matrix):
  eigenVects = []
  for eigen in eigenValues(matrix):
    var = sp.Matrix([[x], [y], [z]])
    mat = sp.Matrix(matrix - a * np.identity(len(matrix), dtype = 'float'))
    mat = (mat.subs(a, eigen))
    matRREF = mat.rref()[0]
    vector, parameters = matRREF.gauss_jordan_solve(sp.Matrix([0] * len(matrix)))
    taus_ones = {tau: 1 for tau in parameters}
    vector = np.array(vector.xreplace(taus_ones))
    eigenVects.append(vector)
  return(eigenVects)


-------DIAGONALIZE---------
arr = [np.array(i) for i in arr]
for mat in arr:
  eigenVals = eigenValues(mat)
  eigenVects = eigenVectors(mat)
  P = sp.Matrix(eigenVects[0])
  for i in range(1, len(eigenVects)):
    P = P.col_insert(i, sp.Matrix(eigenVects[i]))

  D = P.inv() * mat * P
  print(np.array(D), end = '\n\n')


------Diagonalizable-------
n = len(arr)
for i in range(n):
  if len(eigenValues(arr[i])) == n:
    print(f'{i + 1}. Diagonalizable!')
  else:
    print(f'{i + 1}. Not Diagonalizable!')

-------POWER METHOD DOMINANT EIGENVALUE---------
arr = [np.array(i) for i in arr]
for i in range(len(arr)):
  n = len(arr[i])
  eigenVector = np.array([[1]] * n)
  for j in range(20):
    eigenVector = np.matmul(arr[i], eigenVector)
    eigenVector = np.round(eigenVector / max(eigenVector), 2)
  eigenValue = round(sum(np.matmul(arr[i], eigenVector) * eigenVector)[0] / (sum(eigenVector * eigenVector)[0]), 2)
  print(f'{i + 1}. Dominant Eigenvalue = {eigenValue}')
  print(f'Dominant Eigenvector = \n{eigenVector}', end = '\n\n')



-------INVERSE POWER METHOD SMALLEST EIGENVALUE-------
for i in range(len(arr)):
  n = len(arr[i])
  eigenVector = np.array([[1]] * n)
  if np.linalg.det(arr[i]) != 0:
    inv = np.linalg.inv(arr[i])
  else:
    print(f'{i + 1}. Cannot Find Smallest Eigenvector!\n')
    continue
  for j in range(20):
    eigenVector = np.matmul(inv, eigenVector)
    eigenVector = np.round(eigenVector / max(eigenVector), 2)
  eigenValue = round(sum(np.matmul(inv, eigenVector) * eigenVector)[0] / (sum(eigenVector * eigenVector)[0]), 2)
  print(f'{i + 1}. Smallest Eigenvalue = {eigenValue}')
  print(f'Smallest Eigenvector = \n{eigenVector}', end = '\n\n')


------BISECTION----------
def bisectionMethod(arr):
  eq, a, b = arr
  while True: 
    xi = (a + b) / 2
    f = eq.subs(x, xi)
    if f <= 0.00001 and f >= -0.00001:
      break
    else: 
      try:
        fa = eq.subs(x, a)
        fb = eq.subs(x, b)
        if fa * f < 0: b = xi
        else: a = xi
      except:
        print('Divide By Zero Error!')
        break
  return xi

for i in range(len(arr)):
  print(f'{i + 1}. {bisectionMethod(arr[i])}')


-------NEWTON RAPHSON----------
def newtonRaphsonMethod(arr):
  eq, a, b = arr
  fdx = diff(eq)
  if fdx == 0:
    return 'Newton Raphson Method Not Applicable'
  xn = a
  oxn = 100
  #while abs(xn - oxn) >= 0.000001:
  for i in range(10):
    fxn = eq.subs(x, xn)
    fdxn = fdx.subs(x, xn)
    if fdxn == 0:
      break
    hn = -fxn / fdxn
    oxn = xn
    xn = xn + hn

  return round(xn , 6)

# for i in range(len(arr)):
print(newtonRaphsonMethod(arr[1]))
# print(f'{i + 1}. {newtonRaphsonMethod(arr[i])}')

------REGULA FALSI METHOD-------
def regulaFalsiMethod(arr):
  eq, a, b = arr
  for i in range(5):
    fa = eq.subs(x, a)
    fb = eq.subs(x, b)
    hn = (abs(fa) * (b - a)) / (abs(fa) + abs(fb))
    xn = a + hn
    fxn = eq.subs(x, xn)
    if fxn < 0: a = xn
    elif fxn > 0: b = xn
    print(fxn)

regulaFalsiMethod(arr[2])


-----FIXED POINT ITERATION------
